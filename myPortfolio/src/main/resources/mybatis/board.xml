<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- sql문이 모여있는 맵퍼 파일  mybatis-config.xml에서 설정한Book클래스를 이용해서 사용한다. -->

<mapper namespace="board"><!-- namespace는 DaoImpl에서 사용된다 예)board.list -->

	<!--  mybatis가 xml로 맵퍼파일을 사용하기 때문에 (%를 여기에 사용이 불가능)
	  Like 시 사용하는 '%' 를 문자열 취급 하여 concat으로 이어 붙인다. (안에 있는것 부터 실행)
	  
	  #(해쉬)사용시 Prepared Statement 방식  sql을 실행하지 않고 준비상태 ?기호로 추후 입력될 값을 비워 놓게 된다.
	  execute 문에서 나머지 중요 문자열을 변수 처리하여 넘기면 나중에 실행된다 == 동적 sql (sql 인젝션 공격등의 방어에 좋다.)
	  $(달러사인)사용시 statement 방식이기 때문에 값이 아닌 문자열이 되게 된다.
	-->
	<sql id="search">
			<if test="search != null and keyword != '' and keyword != null">
			AND ${search} LIKE CONCAT(CONCAT('%', #{keyword}), '%')
			</if>
	</sql>
	<!-- 	sql 태그 안에 있는 쿼리는 include 태그로 사용 가능하다. -->
	
	<select id="total" resultType="Integer">
		SELECT /*total board.xml*/
			COUNT(*) 
		FROM 
			BOARD 
		WHERE 
			B_DELETE = 'N'
		<include refid="search"></include>
	</select>
	
<!-- 	포트폴리오 리스트 삭제가 N인것만 가져온다. -->
<!-- 		페이지네이션을 위해 오라클 에서는 서브쿼리를 두번 날려줘야 한다.(rownum 사용) -->
<!-- 	CDATA 로 감싸서 <= 부호를 글자 그대로 인식하도록 해준다. -->
<!--    page는 현재 페이지를 의미    perPage는 페이지 당 보여줄 개수 (한번에 출력할 개수)
		select *
		from (select rownum row_num, sub.* 
		from (select b_no,b_title,b_writer,b_contents,b_date from board where b_delete='N' order by b_no) sub)
		where row_num > (현재 페이지 -1 * 한번에 보여질 갯수) and row_num <= (현재 페이지 * 한번에 보여질 갯수);
-->
	<select id="list" resultType="Board">
		SELECT /*list board.xml*/
			*
		FROM
		(SELECT 
			ROWNUM ROW_NUM,
			SUB.* 
		FROM(
			SELECT
				B_NO,
				B_TITLE,
				B_WRITER,
				B_REG_TS
			FROM
				BOARD
			WHERE B_DELETE = 'N'
		<include refid="search"></include> ORDER BY B_NO) SUB)
		
		<![CDATA[
			WHERE ROW_NUM > ((#{dbPage} - 1) * #{perPage}) AND ROW_NUM <= (#{dbPage} * #{perPage})
		]]>
	</select>
	
<!-- 	포트폴리오 등록 시퀀스를 이용해서 자동증가 1부터 1씩증가  -->
	<insert id="add">
	INSERT INTO BOARD( /*add board.xml*/
		B_NO,
		B_TITLE,
		B_WRITER,
		B_SUMMARY,
		B_REG_TS,
		B_DELETE,
		B_START_TS,
		B_END_TS,
		B_USER_CNT,
		B_PURPOSE,
		B_DB,
		B_TOOL,
		B_LANGUAGE,
		B_ETC
	)VALUES(
		bno_seq.nextval,
		#{bTitle},
		#{bWriter},
		#{bSummary},
		SYSDATE,
		'N',
		#{bStartTs},
		#{bEndTs},
		#{bUserCnt},
		#{bPurpose},
		#{bDb},
		#{bTool},
		#{bLanguage},
		#{bEtc}
	)
	</insert>
	
<!-- 포트폴리오 조회수 증가 -->
	<update id="viewCount">
		UPDATE /*viewCount board.xml*/
			BOARD
		SET 
			B_VIEWS = B_VIEWS +1
		WHERE 
			B_NO = #{bNo}
	</update>
<!-- 	포트폴리오 상세보기 -->
	<select id="view" resultType="Board">
		SELECT /*view board.xml*/
			B_NO,
			B_TITLE,
			B_WRITER,
			B_SUMMARY,
			B_REG_TS,
			B_START_TS,
			B_END_TS,
			B_USER_CNT,
			B_PURPOSE,
			B_DB,
			B_TOOL,
			B_LANGUAGE,
			B_ETC,
			B_VIEWS 
		FROM 
			BOARD 
		WHERE 
			B_NO = #{bNo}
	</select>
<!-- 	포트폴리오 수정 -->
	<update id="update">
		UPDATE /*update board.xml*/
			BOARD
		SET
			B_TITLE = #{bTitle},
			B_WRITER = #{bWriter},
			B_SUMMARY = #{bSummary},
			B_START_TS = #{bStartTs},
			B_END_TS = #{bEndTs},
			B_USER_CNT = #{bUserCnt},
			B_PURPOSE = #{bPurpose},
			B_DB = #{bDb},
			B_TOOL = #{bTool},
			B_LANGUAGE = #{bLanguage},
			B_ETC = #{bEtc},
			B_UPDATE_TS = SYSDATE,
			B_UPDATE_WRITER = #{userId}
		WHERE 
			B_NO = #{bNo}
	</update>
<!-- 	포트폴리오 삭제 -->
	<update id="delete">
		UPDATE /*delete board.xml*/
			BOARD
		SET
			B_DELETE = 'Y',
			B_DELETE_TS = SYSDATE,
			B_UPDATE_WRITER = #{userId}
		WHERE
			B_NO = #{bNo}
	</update>
	
	<insert id="fileInsert">
		INSERT INTO B_FILE( /*fileInsert board.xml*/
			B_NO,
			F_NO,
			F_O_NAME,
			F_P_NAME,
			F_VOLUME,
			F_TYPE,
			F_DELETE,
			F_REG_TS,
			F_DIR
		)VALUES(
			#{bNo},
			FNO_SEQ.NEXT_VAL,
			#{fOName},
			#{fPName},
			#{fVolume},
			#{fType},
			'N',
			SYSDATE,
			#{fDir}
		)
	</insert>
	
	<select id="fileList" resultType="Board">
		SELECT	/*fileList board.xml*/
			F_NO, 
			F_O_NAME,
			F_P_NAME,
			F_VOLUME,
			F_DIR 
		FROM 
			BOARD B
		JOIN 
			B_FILE BF 
		ON 
			B.B_NO =BF.B_NO 
		AND 
			BF.B_NO = #{bNo}
	</select>
</mapper>